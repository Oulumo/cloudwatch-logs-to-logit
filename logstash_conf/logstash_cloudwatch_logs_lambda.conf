#
# Logstash configuration to be used with CloudWatch Logs (transferred to Logit.io with the lambda code
# in this repository). This version has extra functionality to work with AWS Lambda's logs, extracting
# request ID and execution parameters (duration / billed duration / configured memory size / memory used).
#

filter {
  if ([message] =~ "cloudWatchLogEvents") {
    json {
      source => "message"
      remove_field => [ "message" ]
    }
    split {
      field => "cloudWatchLogEvents"
    }
    mutate {
      rename => [
        "[cloudWatchLogEvents][logGroupName]", "logGroupName",
        "[cloudWatchLogEvents][logStreamName]", "logStreamName",
        "[cloudWatchLogEvents][message]", "message",
        "[cloudWatchLogEvents][timestamp]", "timestamp"
      ]
      remove_field => "cloudWatchLogEvents"
    }
    date {
      match => ["timestamp", "ISO8601"]
      target => "@timestamp"
      remove_field => [ "timestamp" ]
    }

    grok {
      match => { "message" => "(?:START|END) RequestId: %{UUID:[lambda][requestId]}" }
      tag_on_failure => []
    }

    grok {
      match => { "message" => "REPORT RequestId: %{UUID:[lambda][requestId]}\s+Duration: %{BASE16FLOAT:[lambda][duration]} ms\s+Billed Duration: %{BASE16FLOAT:[lambda][billedDuration]} ms\s+Memory Size: %{BASE10NUM:[lambda][memorySize]} MB\s+Max Memory Used: %{BASE10NUM:[lambda][memoryUsed]} MB" }
      tag_on_failure => []
    }

    mutate {
      convert => {
        "[lambda][duration]" => "integer"
        "[lambda][billedDuration]" => "integer"
        "[lambda][memorySize]" => "integer"
        "[lambda][memoryUsed]" => "integer"
      }
    }
  }
}
